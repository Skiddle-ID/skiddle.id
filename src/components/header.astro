<nav class="h-10 border-b border-muted justify-left divide-x divide-muted [&>a]:py-1 [&>a]:px-4 fixed w-full bg-[var(--color-black)] flex items-center">
  <a href="/" class="flex items-center gap-2 text-[var(--color-primary)]">
    <span>skiddle@web ~</span>
    <div class="w-[10px] h-[21px] animate-blink bg-[var(--color-primary)]"></div>
  </a>

  <a class="hover:text-base0E" href="/posts">posts</a>
  <a class="hover:text-base0E border-r! border-muted" href="/rss.xml">rss</a>
  <button
    id="themeToggle"
    class="ml-auto px-3 py-1 hover:text-base0E flex items-center justify-center border border-muted rounded-md"
    type="button"
    title="Toggle theme"
    aria-label="Toggle theme"
    aria-pressed="false">
    <span class="sr-only">Toggle theme</span>
    <!-- Sun icon (shown in light theme) -->
    <svg id="iconSun" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="size-6 hidden">
      <circle cx="12" cy="12" r="4"></circle>
      <path d="M12 2v2"></path>
      <path d="M12 20v2"></path>
      <path d="m4.93 4.93 1.41 1.41"></path>
      <path d="m17.66 17.66 1.41 1.41"></path>
      <path d="M2 12h2"></path>
      <path d="M20 12h2"></path>
      <path d="m6.34 17.66-1.41 1.41"></path>
      <path d="m19.07 4.93-1.41 1.41"></path>
    </svg>
    <!-- Moon icon (shown in dark theme) -->
    <svg id="iconMoon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="size-6 hidden">
      <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
    </svg>
  </button>
  <div class="relative">
    <button
      id="primaryToggle"
      class="mx-2 px-2 py-1 hover:text-base0E flex items-center justify-center border border-muted rounded-md"
      type="button"
      title="Change primary color"
      aria-haspopup="true"
      aria-expanded="false">
      <span class="sr-only">Change primary color</span>
      <span id="primarySwatch" class="inline-block size-5 rounded-full ring-2 ring-transparent" style="background-color: var(--color-primary);"></span>
    </button>
    <div id="primaryMenu" class="hidden absolute right-0 mt-2 w-14 rounded-lg border border-muted bg-[var(--color-black)] p-2 shadow-lg">
      <ul class="flex flex-col gap-2" role="menu" aria-label="Primary color choices">
        <li>
          <button data-color="var(--color-base0B)" class="size-5 rounded-full block" style="background-color: var(--color-base0B);" title="Blue" aria-label="Blue"></button>
        </li>
        <li>
          <button data-color="var(--color-base0E)" class="size-5 rounded-full block" style="background-color: var(--color-base0E);" title="Purple" aria-label="Purple"></button>
        </li>
        <li>
          <button data-color="var(--color-base0D)" class="size-5 rounded-full block" style="background-color: var(--color-base0D);" title="Green" aria-label="Green"></button>
        </li>
        <li>
          <button data-color="var(--color-base07)" class="size-5 rounded-full block" style="background-color: var(--color-base07);" title="Teal" aria-label="Teal"></button>
        </li>
        <li>
          <button data-color="var(--color-base0C)" class="size-5 rounded-full block" style="background-color: var(--color-base0C);" title="Pink" aria-label="Pink"></button>
        </li>
      </ul>
    </div>
  </div>
</nav>

<script>
  (function() {
    function getSystemPrefersLight() {
      try { return window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches; } catch (_) { return false; }
    }
    function applyTheme(theme) {
      const root = document.documentElement;
      if (theme === 'light') {
        root.classList.add('theme-light');
      } else {
        root.classList.remove('theme-light');
      }
      const btn = document.getElementById('themeToggle');
      const sun = document.getElementById('iconSun');
      const moon = document.getElementById('iconMoon');
      if (btn && sun && moon) {
        const isLight = theme === 'light';
        // Show sun icon in light theme (current), moon icon in dark theme (current)
        sun.classList.toggle('hidden', !isLight);
        moon.classList.toggle('hidden', isLight);
        btn.setAttribute('aria-pressed', isLight ? 'true' : 'false');
      }
    }
    function init() {
      let theme = localStorage.getItem('theme');
      if (!theme) {
        theme = getSystemPrefersLight() ? 'light' : 'dark';
      }
      applyTheme(theme);

      // Primary color init
      const savedPrimary = localStorage.getItem('primary');
      const rootStyle = document.documentElement.style;
      const swatch = document.getElementById('primarySwatch');
      function updatePrimaryMenuSelection(value) {
        const menu = document.getElementById('primaryMenu');
        if (!menu) return;
        const items = menu.querySelectorAll('button[data-color]');
        items.forEach((btn) => {
          const val = btn.getAttribute('data-color');
          const isActive = val === value;
          btn.setAttribute('aria-current', isActive ? 'true' : 'false');
          (btn as HTMLElement).style.boxShadow = isActive ? `0 0 0 2px ${value}` : 'none';
          (btn as HTMLElement).style.outline = 'none';
        });
        if (swatch) {
          (swatch as HTMLElement).style.boxShadow = `0 0 0 2px ${value}`;
        }
      }
      if (savedPrimary) {
        rootStyle.setProperty('--color-primary', savedPrimary);
        if (swatch) swatch.style.backgroundColor = savedPrimary;
        updatePrimaryMenuSelection(savedPrimary);
      }

      // Toggle primary menu
      const primaryToggle = document.getElementById('primaryToggle');
      const primaryMenu = document.getElementById('primaryMenu');
      function setMenu(open) {
        if (!primaryMenu || !primaryToggle) return;
        primaryMenu.classList.toggle('hidden', !open);
        primaryToggle.setAttribute('aria-expanded', open ? 'true' : 'false');
      }
      if (primaryToggle && primaryMenu) {
        primaryToggle.addEventListener('click', (e) => {
          e.stopPropagation();
          const open = primaryMenu.classList.contains('hidden');
          setMenu(open);
        });
        // Click handlers for color items
        primaryMenu.querySelectorAll('button[data-color]')?.forEach(btn => {
          btn.addEventListener('click', (ev) => {
            const value = btn.getAttribute('data-color');
            if (!value) return;
            rootStyle.setProperty('--color-primary', value);
            localStorage.setItem('primary', value);
            if (swatch) swatch.style.backgroundColor = value;
            updatePrimaryMenuSelection(value);
            setMenu(false);
          });
        });
        // Close on outside click / escape
        document.addEventListener('click', (evt) => {
          const target = evt.target as Node | null;
          if (!target) return;
          if (!primaryMenu.contains(target) && target !== primaryToggle) setMenu(false);
        });
        document.addEventListener('keydown', (evt) => {
          if (evt.key === 'Escape') setMenu(false);
        });
      }
      const btn = document.getElementById('themeToggle');
      if (btn) {
        btn.addEventListener('click', () => {
          const current = document.documentElement.classList.contains('theme-light') ? 'light' : 'dark';
          const next = current === 'light' ? 'dark' : 'light';
          localStorage.setItem('theme', next);
          applyTheme(next);
        });
      }
      // Sync with system changes if no explicit preference
      if (!localStorage.getItem('theme') && window.matchMedia) {
        const mq = window.matchMedia('(prefers-color-scheme: light)');
        mq.addEventListener?.('change', (e) => {
          applyTheme(e.matches ? 'light' : 'dark');
        });
      }
    }
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  })();
</script>
