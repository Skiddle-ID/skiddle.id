---
import BaseHead from '../components/base-head.astro';
import Header from '../components/header.astro';
import Footer from '../components/footer.astro';

import '@fontsource/geist-mono';

import '../style.css';

interface Props {
  title?: string;
  description?: string;
  image?: string;
  children: any;
}

const {
  title = 'Skiddle@web ~',
  description = 'I\'m a software developer passionate about JavaScript and open protocols, creating better information ecosystems.',
  image = '/android-chrome-512x512.png',
} = Astro.props;
const site = Astro.site;
const canonical = new URL(Astro.url.pathname, site).toString();

// Build BreadcrumbList from the path segments
const segments = Astro.url.pathname
  .split('/')
  .filter(Boolean);
const breadcrumbItems = [
  { '@type': 'ListItem', position: 1, name: 'Home', item: site },
  ...segments.map((seg, idx) => {
    const url = new URL('/' + segments.slice(0, idx + 1).join('/'), site).toString();
    const name = seg.replace(/[-_]/g, ' ').replace(/\b\w/g, (m) => m.toUpperCase());
    return { '@type': 'ListItem', position: idx + 2, name, item: url };
  }),
];

const jsonLd = {
  '@context': 'https://schema.org',
  '@graph': [
    {
      '@type': 'WebSite',
      name: 'Skiddle',
      url: site,
      inLanguage: 'en',
      potentialAction: {
        '@type': 'SearchAction',
        target: `${site}posts?q={search_term_string}`,
        'query-input': 'required name=search_term_string',
      },
    },
    {
      '@type': 'Organization',
      name: 'Skiddle',
      url: site,
      logo: '/android-chrome-512x512.png',
    },
    {
      '@type': 'WebPage',
      url: canonical,
      name: title,
      description: description,
    },
    {
      '@type': 'BreadcrumbList',
      itemListElement: breadcrumbItems,
    },
  ],
};
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <BaseHead title={title} description={description} image={image} />
    <script type="application/ld+json">{JSON.stringify(jsonLd)}</script>
    <script>
      (function() {
        try {
          var theme = localStorage.getItem('theme');
          if (!theme) { theme = 'dark'; }
          var root = document.documentElement;
          if (theme === 'light') root.classList.add('theme-light');
          else root.classList.remove('theme-light');

          // Apply saved primary color early to prevent flash
          var savedPrimary = localStorage.getItem('primary');
          if (savedPrimary) {
            root.style.setProperty('--color-primary', savedPrimary);
          }
        } catch (_) {}
      })();
    </script>
  </head>
  <body class="antialiased bg-[var(--color-black)] text-[var(--color-white)] font-mono tracking-normal leading-normal flex flex-col min-h-screen selection:bg-base0E selection:text-black">
    <div class="flex flex-col grow">
      <Header />

      <main class="mt-10 flex flex-col gap-3 px-5 pt-5 grow">
        <slot />
      </main>

      <footer class="page__footer">
        <Footer />
      </footer>
    </div>
  </body>
</html>
