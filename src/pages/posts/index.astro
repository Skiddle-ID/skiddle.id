---
export const prerender = false;

import { createMarkdownProcessor } from '@astrojs/markdown-remark';
import { getPosts } from '~/atproto/getPosts';
import Shell from '~/layouts/shell.astro';
import FormattedDate from '~/components/formatted-date.astro';
import { loadWasm } from 'shiki';

// @ts-ignore - load Oniguruma for shiki syntax highlighting used by the markdown processor
loadWasm(await import('shiki/onig.wasm'));

const q = (Astro.url.searchParams.get('q') || '').trim().toLowerCase();
const posts = await getPosts(Astro.locals, '', false);
const postsFilteredBase = posts.filter(p => !p.content?.startsWith('NOT_LIVE'));
const postsFiltered = q
  ? postsFilteredBase.filter(p => {
      const title = (p.title || '').toLowerCase();
      const content = (p.content || '').toLowerCase();
      return title.includes(q) || content.includes(q);
    })
  : postsFilteredBase;

const markdownProcessor = await createMarkdownProcessor();

function firstBlock(html: string): string {
  // Prefer the first paragraph; fall back to first common block or a plain text slice
  const p = html.match(/<p[\s\S]*?<\/p>/i);
  if (p) return p[0];
  const block = html.match(/<(p|h[1-6]|ul|ol|pre|blockquote)[\s\S]*?<\/(?:\1)>/i);
  if (block) return block[0];
  return html.slice(0, 200);
}

const postsRendered = await Promise.all(
  postsFiltered.map(async (p) => {
    const rendered = await markdownProcessor.render(p.content || '');
    const summaryHtml = firstBlock(rendered.code);
    return { ...p, summaryHtml };
  })
);
---
<Shell title="Skiddle@web ~/posts">
  <div class="mx-auto max-w-2xl flex flex-col">
    <header class="flex flex-col">
      <h1 class="font-bold before-hash-1">Posts</h1>
      <p class="text-base03">
        { q && (<>
          Showing {postsFiltered.length} result{postsFiltered.length === 1 ? '' : 's'} for "{q}".
        </>) }
        { !q && (<>Showing {postsFilteredBase.length} posts.</>) }
      </p>
    </header>

    <div class="flex flex-col divide-y divide-muted">
      {postsRendered.map((post) => (
        <div class="py-4">
          <article>
            <header>
              <h2 class="text-[var(--color-primary)] font-bold">
                <a href={`/posts/${post.rkey}/`}>{post.title}</a>
              </h2>
              <p class="text-base03">
                <span class="date">
                  <FormattedDate date={new Date(Date.parse(post.createdAt))} />
                </span>
              </p>
            </header>
          </article>

          <section class="post__summary prose max-w-6xl" set:html={post.summaryHtml} />
        </div>
      ))}
    </div>
  </div>
</Shell>

